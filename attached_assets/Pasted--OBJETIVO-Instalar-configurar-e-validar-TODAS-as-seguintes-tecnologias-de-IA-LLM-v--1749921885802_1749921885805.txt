# === OBJETIVO ===
Instalar, configurar e validar **TODAS** as seguintes tecnologias de IA (LLM, v√≠deo, voz-TTS, formul√°rios) no IA Board.
Caso algum m√≥dulo falhe, recrie a estrutura necess√°ria at√© obter 100 % de funcionamento real (sem fallbacks).

# === VARI√ÅVEIS .ENV (copiar exatamente) ===
OPENROUTER_API_KEY=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
MISTRAL_API_KEY=7lCXEIqFPbgj7VUb7jAf9OY5Id93lJCH
STABILITY_API_KEY=sk-hElW1SRtTMGE2N8QmHWMQFfc21fRc6qF0wSyAKFdb1ukwJEy
TYPEFORM_API_KEY=tfp_AdtBqVmwpmNj7YhHw7DhBEd2Yko3mDQ115dy2xL1B5sV_3pdYcugRXA7TDK
HEYGEN_API_KEY=ZGY5MGJkOWM0OTE4NGVlODgyNjViNjhjNGUyM2Y2MDItMTc0OTkyMTQwNg==
# GOOGLE TTS usa Application-Default Credentials (ADC). Configure gcloud abaixo.

# === PASSOS T√âCNICOS ===

1. **LLM MULTI-PROVEDOR (OpenRouter)**
   - Endpoint compat√≠vel OpenAI: https://openrouter.ai/api/v1/chat/completions
   - Modelos m√≠nimos: gpt-4o, claude-3-sonnet-20240229, gemini-1.5-pro
   - Header ‚Üí `Authorization: Bearer $OPENROUTER_API_KEY`
   - Teste: prompt ‚ÄúTeste t√©cnico IA Board‚Äù devolvendo ‚â• 50 tokens.

2. **MISTRAL LARGE**
   - Base URL: https://api.mistral.ai/v1/chat/completions
   - Header ‚Üí `Authorization: Bearer $MISTRAL_API_KEY`
   - Modelo: mistral-large
   - Validar resposta ‚â• 50 tokens.

3. **V√çDEO IA ‚Äì Stability Video Œ≤**
POST https://api.stability.ai/v2beta/video/generate
Headers:
Authorization: Bearer $STABILITY_API_KEY
Content-Type: application/json
Body:
{
"prompt": "Cinematic drone shot of neo-tokyo at sunset, 4k",
"seed": 42
}

bash
Copiar
Editar
- Poll at√© `status: completed`.
- Baixar `.mp4` ‚Üí exibir em popup IA Board.

4. **AVATAR FALANTE ‚Äì HeyGen API**
- Base URL: https://api.heygen.com/v1/video.generate
- Header ‚Üí `X-Api-Key: $HEYGEN_API_KEY`
- Use avatar default + voz PT-BR; salvar link de v√≠deo no canvas.

5. **FORMUL√ÅRIOS DIN√ÇMICOS ‚Äì Typeform**
- Endpoint: https://api.typeform.com/forms
- Header ‚Üí `Authorization: Bearer $TYPEFORM_API_KEY`
- Criar formul√°rio ‚ÄúFeedback IA Board‚Äù com 2 campos (Nome, Opini√£o).

6. **GOOGLE TTS ‚Äì Texto ‚Üí √Åudio (MP3)**
- Configure gcloud ADC:
  ```bash
  gcloud auth application-default login
  gcloud config set project <PROJECT_ID>
  ```
- Exemplo de chamada (substitua PROJECT_ID):
  ```
  POST https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLE_API_KEY
  {
    "input": { "text": "Ol√°! Este √°udio foi gerado pela IA Board." },
    "voice": { "languageCode": "pt-BR", "name": "pt-BR-Wavenet-A", "ssmlGender": "FEMALE" },
    "audioConfig": { "audioEncoding": "MP3" }
  }
  ```
- Reproduzir e permitir download do `.mp3` no bloco de √°udio.

7. **INTEGRA√á√ÉO NO CURISO (CANVAS)**
- Cada m√≥dulo acima se torna um **bloco IA**:
  ‚Ä¢ üåê LLM (multi-modelo)  
  ‚Ä¢ üéûÔ∏è V√≠deo (Stability)  
  ‚Ä¢ üó£Ô∏è Avatar (HeyGen)  
  ‚Ä¢ üîä TTS (Google)  
  ‚Ä¢ üìã Form (Typeform)
- Dropdown de sele√ß√£o de modelo ou servi√ßo em cada bloco.
- Salvar estado no localStorage/IndexedDB.

8. **TESTE AUTOMATIZADO (`npm run healthcheck`)**
- Verificar:
  ‚Ä¢ LLM responde ‚â• 50 tokens  
  ‚Ä¢ Stability devolve link `.mp4` v√°lido (HTTP 200)  
  ‚Ä¢ HeyGen gera v√≠deo status ‚Äúdone‚Äù  
  ‚Ä¢ Google TTS retorna `audioContent` base64 ‚â† vazio  
  ‚Ä¢ Typeform cria form e retorna id  
- Se qualquer teste falhar ‚Üí retornar exit 1.

9. **LOGS**
- `logs/ai.log` para LLMs (+ lat√™ncia & custo)
- `logs/video.log` para Stability/HeyGen
- `logs/tts.log` para Google TTS
- `logs/webhook.log` para Typeform

10. **ENTREGA**
 - IA Board rodando local (`npm run dev`) e desktop (`npm run desktop`)
 - `.env.example` com placeholders
 - README atualizado ‚ù§Ô∏è

# Se qualquer etapa n√£o atingir 100 % de √™xito, refatore at√© passar em `npm run healthcheck`.
